name: C/C++ CI
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: get-cmake
      uses: lukka/get-cmake@v3.19.0
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        git submodule sync
        git submodule update --init --recursive
    - name: cmake
      run: cd PhysXSharpNative; cmake .
    - name: make
      run: cd PhysXSharpNative; make
    - name: mkdir build
      run: |
        mkdir build
        mkdir build-zip
        cp PhysXSharpNative/PhysXSharpNative/libPhysXSharpNative.so build
        cp -r Prebuilt/physx3.4_linux64/release/bin/* build
    - name: Easy Zip Files
      uses: papeloto/action-zip@v1
      with:
        # Files or directories to zip
        files: build/
        # Name of output zip file
        dest: libs.zip
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps :  
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libs.zip
        asset_name: libs.zip          
        asset_content_type: application/zip
